#!/bin/bash
# vi: et sts=4 sw=4 ts=4

set -e

readonly VERSION=0.1.3
readonly PIP2TGZ=pip2tgz
readonly PIP2TGZ_AUTHOR='Dan Church <h3xx@gmx.com>'
readonly PIP_ARGS_GENERAL=(
    --no-input
    --disable-pip-version-check
)
readonly MAKEPKG=/sbin/makepkg
readonly MAKEPKG_ARGS=(
    --linkadd y
    --chown n
)

PIP=pip3
PYTHON=python3
BASE_REQUIRES=(python3)
PKG_OUTDIR=/tmp
PKG_PREFIX=python3-
ALT_PKG_PREFIXES=(python-)
BUILD_TAG=
BUILD_NUMBER=1
PKG_EXT=txz
IN_PKG_BASE=
ARCH=$(uname -m)
USE_MAKEPKG=1
FORCE=0
MODE=package

SLACK_DESC_BANNER0="Packaged by $PIP2TGZ"
SLACK_DESC_BANNER1="$PIP2TGZ by $PIP2TGZ_AUTHOR"
SLACK_DESC_BANNER2="https://github.com/h3xx/pip2tgz"

TEMPDIR=$(mktemp -d -t "${0##*/}.XXXXXX")
cleanup() {
    rm -rf -- "$TEMPDIR"
}
trap 'cleanup' EXIT

USAGE() {
    cat <<EOF
Usage: $PIP2TGZ [OPTIONS] PACKAGE...
EOF
}

HELP_MESSAGE() {
    USAGE
    cat <<EOF
Make Slackware packages from PIP modules.
Options:
    --help                  Show this help message.
    --version               Show version info and exit.
    -2                      Build a Python 2 package.
    -3                      Build a Python 3 package (default).
    --arch ARCH             Specifies the package architecture.
    --build-tag TAG         Specifies the package build tag.
    --build-number NUM      Specifies the package build number.
    --pkgdir DIR            Output packages to DIR (default: /tmp).
    --no-banner             Leave out the $PIP2TGZ banner in the description.
    --pip CMD               Use CMD as the PIP binary (default: pip3).
    --prefix PREFIX         Use "{PREFIX}-PACKAGE" as the generated package
                              prefix (default is python3-).
    --alt-prefixes LIST     Colon-separated list of alternative package
                              prefixes, e.g. python-:python3-: (default:
                              python-).
    --package-ext EXT       Specifies the package extension (default: txz).
                              Ignored if --dir is specified.
    --package-name,--name NAME Set the exact package name (default:
                              automatically determined by PIP package name).
                              Overrides --prefix.
    --no-makepkg            Do not attempt to run makepkg to build a package.
                              Really only useful with --jail.
    --jail-only JAIL        Set the package jail location to JAIL and don't run
                              makepkg to build a package.
    --jail JAIL             Set the package jail location to JAIL. The script
                              will not clear this directory before outputting
                              its files there. By default, it uses a temporary
                              directory as the build jail.
    --slack-required        Output the slack-required contents and exit.

EOF
    COPYRIGHT_MESSAGE
}

VERSION_MESSAGE() {
    cat <<EOF
$PIP2TGZ $VERSION

EOF
    COPYRIGHT_MESSAGE
}

COPYRIGHT_MESSAGE() {
    cat <<EOF
Copyright (C) 2021 $PIP2TGZ_AUTHOR.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
EOF
}

main() {
    local ARGS=("$@")
    local ARG_ERRORS=0
    local ai
    for (( ai = 0; ai < ${#ARGS[@]} ; ++ai )); do
        case "${ARGS[$ai]}" in
            --help)
                HELP_MESSAGE
                exit 0
                ;;
            --version)
                VERSION_MESSAGE
                exit 0
                ;;
            -2)
                PIP=pip2
                PYTHON=python2
                PKG_PREFIX=python2-
                BASE_REQUIRES=(python2)
                ;;
            -3)
                PIP=pip3
                PYTHON=python3
                PKG_PREFIX=python3-
                BASE_REQUIRES=(python3)
                ;;
            --alt-prefixes)
                let ++ai
                split_array ALT_PKG_PREFIXES ':' <<< "${ARGS[$ai]}"
                ;;
            --arch)
                let ++ai
                ARCH=${ARGS[$ai]}
                ;;
            --build-number)
                let ++ai
                BUILD_NUMBER=${ARGS[$ai]}
                ;;
            --build-tag)
                let ++ai
                BUILD_TAG=${ARGS[$ai]}
                ;;
            --force)
                FORCE=1
                ;;
            --jail)
                let ++ai
                JAIL=${ARGS[$ai]}
                ;;
            --jail-only)
                let ++ai
                JAIL=${ARGS[$ai]}
                USE_MAKEPKG=0
                ;;
            --nobanner |\
            --no-banner)
                # Note: undocumented --nobanner to make this sorta-compatible
                # with cpan2tgz (DWIM!)
                SLACK_DESC_BANNER0=
                SLACK_DESC_BANNER1=
                ;;
            --no-makepkg)
                USE_MAKEPKG=0
                ;;
            --pip)
                let ++ai
                PIP=${ARGS[$ai]}
                ;;
            --pkgdir)
                let ++ai
                PKG_OUTDIR=${ARGS[$ai]}
                ;;
            --package-ext)
                let ++ai
                PKG_EXT=${ARGS[$ai]}
                ;;
            --package-name|--name)
                let ++ai
                IN_PKG_BASE=${ARGS[$ai]}
                ;;
            --prefix)
                let ++ai
                PKG_PREFIX=${ARGS[$ai]}
                ;;
            --slack-required)
                MODE=slack-required
                ;;
            --|[^-]*)
                break
                ;;
            *)
                printf 'Unrecognized option: %s\n' "${ARGS[$ai]}" >&2
                ARG_ERRORS=1
                ;;
        esac
    done

    shift $ai

    if [[ $# -eq 0 ]]; then
        USAGE
        ARG_ERRORS=1
    fi

    if [[ $ARG_ERRORS -ne 0 ]]; then
        echo "Try '$PIP2TGZ --help' for more information." >&2
        exit 2
    fi

    if [[ $MODE = 'package' && $UID -ne 0 && $USE_MAKEPKG -ne 0 ]]; then
        if [[ $FORCE -eq 0 ]]; then
            printf '%s\n%s\n%s\n%s\n' \
                'Politely refusing to build packages without proper permissions. Either...' \
                '1. Re-run as root.' \
                '2. Re-run with --jail-only DIR to just create a package jail.' \
                '3. Re-run with --force to force building broken packages.' \
                >&2
            exit 1
        else
            warn 'Warning: Creating broken packages with files owned by %s:%s\nInstall them at your own risk!\n' \
                "$(id -un)" \
                "$(id -gn)" \
                >&2
        fi
    fi

    local \
        PKG \
        _JAIL \
        _OUTPUT \
        _VER \
        _TARBALL_FILENAME

    for PKG; do

        case "$MODE" in
            package)
                _JAIL=$(realpath -- "${JAIL:-$(mktemp -d -p "$TEMPDIR" -t "jail.XXXXXX")}")
                _TARBALL_FILENAME=$(tarball_file "$PKG")
                _VER=$(tarball_version "$_TARBALL_FILENAME")
                _PACKAGE_NAME=$(tarball_name "$_TARBALL_FILENAME")

                # Correct package name as it exists in pip
                # e.g. Foo-Bar could be and probably is Foo_Bar
                make_package_jail "$PKG" "$_TARBALL_FILENAME" "$_JAIL" "$_VER"
                if [[ $USE_MAKEPKG -ne 0 ]]; then
                    _OUTPUT=$(realpath -- "$PKG_OUTDIR")/$(pip_package_to_slackpack_name "$_PACKAGE_NAME")-$_VER-$ARCH-$BUILD_NUMBER$BUILD_TAG.$PKG_EXT
                    echo "outputting to $_OUTPUT" >&2
                    tarup_package "$_JAIL" "$_OUTPUT"
                fi
                ;;
            slack-required)
                gen_slack_required "$PKG"
                ;;
        esac
    done
}

split_array() {
    local -n ARR=$1
    local -r DELIM=$2
    readarray -d "$DELIM" -t ARR
    # XXX Here-strings (<<<) add a newline
    # --> Workaround: strip newlines from the end of the last entry
    ARR[-1]=${ARR[-1]%$'\n'}
}

make_package_jail() {
    # REQ_PACKAGE_NAME: The requested package e.g. 'Foolibrary', 'MyPackage==1.0.0'
    # TARBALL_FILENAME: The full path to the tarball generating the package
    # JAIL: Full path to build jail directory
    # VER: The detected package version
    local \
        REQ_PACKAGE_NAME=$1 \
        TARBALL_FILENAME=$2 \
        JAIL=$3 \
        VER=$4
    # PACKAGE_NAME: Real base name of package with capitalization intact, e.g.
    #   MyLibrary
    local -r PACKAGE_NAME=$(tarball_name "$TARBALL_FILENAME")
    local -r PKG_BASE=${IN_PKG_BASE:-$(pip_package_to_slackpack_name "$PACKAGE_NAME")}

    pip_install_into_jail "$JAIL" "$REQ_PACKAGE_NAME"
    install_slackware_metadata "$JAIL" "$PACKAGE_NAME" "$PKG_BASE"
    install_docdir "$JAIL" "$PKG_BASE" "$TARBALL_FILENAME" "$VER"
    cleanup_jail "$JAIL"
    fix_jail_permissions "$JAIL"
}

pip_cmd() {
    # Sometimes pip has trouble with latin-1 terminals
    LANG=en_US.utf8 \
    "$PIP" "$@"
}

pip_download() {
    local \
        REQ_PACKAGE_NAME=$1 \
        DEST_DIR=${2:-$TEMPDIR}
    pip_cmd download "$REQ_PACKAGE_NAME" \
        "${PIP_ARGS_GENERAL[@]}" \
        -d "$TEMPDIR" \
        --no-binary :all:
}

tarball_file() {
    local REQ_PACKAGE_NAME=$1
    local TARBALL_FILENAME=$(
        pip_download "$REQ_PACKAGE_NAME" "$TEMPDIR" |
        tee /dev/stderr |
        grep -oP -- '\S+\.tar\S*\b' |
        head -1
    ) || exit

    if [[ -z $TARBALL_FILENAME ]]; then
        printf 'Failed to parse output from "%s download %s"\n' "$PIP" "$REQ_PACKAGE_NAME" >&2
        exit 2
    fi

    # Normalize path to where it really downloaded
    # Sometimes the line says "Using cached MyPackage-1.0.0.tar.gz"
    # Other times the line says "File was already downloaded /tmp/tempdir/MyPackage-1.0.0.tar.gz"
    # Still other times the line says "Downloading MyPackage-1.0.0.tar.gz (7.8 MB)"
    TARBALL_FILENAME=$TEMPDIR/${TARBALL_FILENAME##*/}
    if [[ ! -f $TARBALL_FILENAME ]]; then
        printf 'Failed to download %s\n' "$REQ_PACKAGE_NAME" >&2
        exit 2
    fi
    printf '%s\n' "$TARBALL_FILENAME"
}

tarball_version() {
    local -r TARBALL_BASENAME=${1##*/}
    local VER=$(
        grep -oP -- '-([0-9]+\.)+' <<< "$TARBALL_BASENAME"
    )
    # Clean up version e.g. "-1.0.0."
    VER=${VER%.}
    VER=${VER#-}
    if [[ -z $VER ]]; then
        printf 'Unable to parse version from tarball "%s"\n' "$TARBALL_BASENAME" >&2
    fi
    printf '%s\n' "$VER"
}

tarball_name() {
    local -r TARBALL_BASENAME=${1##*/}
    local -r STRIP=$(
        grep -oP -- '-([0-9]+\.)+.*' <<< "$TARBALL_BASENAME"
    )
    # Strip off version string, including hyphen
    local -r NAME=${TARBALL_BASENAME:0:${#TARBALL_BASENAME}-${#STRIP}}
    if [[ -z $NAME ]]; then
        printf 'Unable to parse package name from tarball "%s"\n' "$TARBALL_BASENAME" >&2
    fi
    printf '%s\n' "$NAME"
}

python_deps() {
    local REQ_PACKAGE_NAME=$1
    pip_download "$REQ_PACKAGE_NAME" 2>&1 |
        grep ^Collecting |
        sed -e '1d' |
        cut -d ' ' -f 2-
}

pip_install_into_jail() {
    local \
        JAIL=$1 \
        REQ_PACKAGE_NAME=$2
    pip_cmd install "$REQ_PACKAGE_NAME" \
        "${PIP_ARGS_GENERAL[@]}" \
        --no-binary :all: \
        --ignore-installed \
        --no-deps \
        --no-warn-script-location \
        --root "$JAIL" || exit
}

pip_package_to_slackpack_name() {
    local \
        REQ_PACKAGE_NAME=$1 \
        PREFIX=${2:-$PKG_PREFIX}

    printf '%s%s\n' "$PREFIX" "$REQ_PACKAGE_NAME" |
        tr A-Z a-z |
        tr _ -
}

gen_slack_required() {
    local \
        REQ_PACKAGE_NAME=$1
    (
        # Add deps in $BASE_REQUIRES
        for _SLACK_PKG in "${BASE_REQUIRES[@]}"; do
            printf '%s\n' "$_SLACK_PKG"
        done
        # Scan and add python library deps
        python_deps "$REQ_PACKAGE_NAME" |
        while read -r _LINE; do
            # TODO Some are formatted with a number, e.g. click>=7.1.2
            _PIP_BASE=${_LINE%%[<>=]*}
            _VER_REQ=${_LINE:${#_PIP_BASE}}
            # Some are formatted with a comma, e.g. h11<1,>=0.9.0
            IFS=,
            for __VER in ${_VER_REQ}; do
                for PREFIX in \
                    "$PKG_PREFIX" \
                    "${ALT_PKG_PREFIXES[@]}" \
                    ; do
                        _SLK_BASE=$(pip_package_to_slackpack_name "$_PIP_BASE" "$PREFIX")
                        printf '%s%s\n' "$_SLK_BASE" "$__VER"
                done |
                    sort -u |
                    sed -z -e 's,\n, | ,'
            done
        done
    ) |
    sort -u
}

install_slackware_metadata() {
    local \
        JAIL=$1 \
        PACKAGE_NAME=$2 \
        PKG_BASE=$3

    mkdir -p -- "$JAIL/install"

    # slack-desc
    # How far to indent the handy ruler in the slack-desc
    local _INDENT=${PKG_BASE//?/ }
    cat <<EOF >"$JAIL/install/slack-desc"
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description.  Line
# up the first '|' above the ':' following the base package name, and the '|' on
# the right side marks the last column you can put a character in. You must make
# exactly 11 lines for the formatting to be correct.  It's also customary to
# leave one space after the ':'.

$_INDENT|-----handy-ruler------------------------------------------------------|
$PKG_BASE: ${PACKAGE_NAME} (Python library)
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:${SLACK_DESC_BANNER0:+ $SLACK_DESC_BANNER0}
$PKG_BASE:${SLACK_DESC_BANNER1:+ $SLACK_DESC_BANNER1}
$PKG_BASE:${SLACK_DESC_BANNER2:+ $SLACK_DESC_BANNER2}
$PKG_BASE:
EOF

    # slack-required
    gen_slack_required "$PACKAGE_NAME" > "$JAIL/install/slack-required"
}

install_docdir() {
    local \
        JAIL=$1 \
        PKG_BASE=$2 \
        TARBALL_FILENAME=$3 \
        VER=$4 \
        FN

    local DOCDIR=$JAIL/usr/doc/$PKG_BASE-$VER
    mkdir -p -- "$DOCDIR"

    local DINFO_DIR=$(
        find "$JAIL/" \
            -type d \
            \( \
                -name "*.dist-info" \
                -o -name "*.egg-info" \
            \) |
        head -1
    )

    if [[ -d $DINFO_DIR ]]; then
        for FN in "$DINFO_DIR"/*; do
            case "${FN##*/}" in
                *.json | \
                dependency_links.txt | \
                entry_points.txt | \
                installed-files.txt | \
                INSTALLER | \
                METADATA | \
                namespace_packages.txt | \
                not-zip-safe | \
                PKG-INFO | \
                RECORD | \
                REQUESTED | \
                requires.txt | \
                SOURCES.txt | \
                top_level.txt | \
                WHEEL | \
                zip-safe)
                    # Skip
                    ;;
                *)
                    ln -sfv -- \
                        "$(realpath --relative-to="$DOCDIR" -- "$FN")" \
                        "$DOCDIR/"
                    ;;
            esac
        done
    fi

    # Install missing docs from the original tarball ("pip3 install
    # --no-binary" doesn't install some docs)

    if [[ -f $TARBALL_FILENAME ]]; then
        UNTAR_DIR=$(mktemp -d -p "$TEMPDIR" -t "${0##*/}.XXXXXX")
        if tar -x -C "$UNTAR_DIR" -f "$TARBALL_FILENAME"; then
            for FN in \
                "$UNTAR_DIR"/* \
                "$UNTAR_DIR"/*/* \
                ; do
                if [[
                    -f $FN
                    # Isn't a template file
                    && ! $FN =~ \.in$
                    # Isn't already installed
                    && ! -e $DOCDIR/${FN##*/}
                ]]; then
                    case "${FN##*/}" in
                        AUTHORS* | \
                        CHANGES* | \
                        COPYING* | \
                        DESCRIPTION* | \
                        LICENSE* | \
                        README*)
                            install -p -m 0644 -- \
                                "$FN" "$DOCDIR/"
                            ;;
                    esac
                fi
            done
        fi
    fi

}

cleanup_jail() {
    local JAIL=$1
    find "$JAIL" \
        -type f \
        -regextype posix-egrep \
        -regex '.*\.egg-info/installed-files\.txt' \
        -delete

    # Fix some bad [non-Slackware] install paths
    if [[ -d $JAIL/usr/share/man ]]; then
        cp -a -- "$JAIL/usr/share/man" "$JAIL/usr/" &&
        rm -rf -- "$JAIL/usr/share/man" &&
        # Remove empty dirs
        (rmdir -p -- "$JAIL/usr/share" 2>/dev/null; true) || exit
    fi

    if [[ -d $JAIL/usr/share/doc ]]; then
        rm -rf -- "$JAIL/usr/share/doc" &&
        # Remove empty dirs
        (rmdir -p -- "$JAIL/usr/share" 2>/dev/null; true) || exit
    fi

    # Gzip man pages (if any)
    if [[ -d $JAIL/usr/man ]]; then
        local FN LINK EXT=.gz
        shopt -s globstar nullglob

        # Compress files
        for FN in "$JAIL/usr/man/"**; do
            if [[
                -f $FN
                && ! -L $FN
                # Not already compressed
                && $FN != *$EXT
            ]]; then
                gzip -9 -- "$FN"
            fi
        done

        # Update links, e.g.
        # /usr/man/man1/foo.1 -> bar.1
        # to
        # /usr/man/man1/foo.1.gz -> bar.1.gz
        for FN in "$JAIL/usr/man/"**; do
            if [[
                -L $FN
                && ! -d $FN
                # Not already compressed
                && $FN != *$EXT
            ]]; then
                # Convert absolute path links to links within the jail
                TARGET=$(readlink -f -- "$FN")
                # Fix links to places outside the jail
                if [[ $TARGET = /usr/man* ]]; then
                    TARGET=$JAIL$TARGET
                fi
                if [[
                    ! -e $FN
                    && -e $TARGET$EXT
                ]]; then
                    ln -sf -- "$(realpath --relative-to="$(dirname -- "$FN")" -- "$TARGET$EXT")" "$FN$EXT"
                    rm -f -- "$FN"
                fi
            fi
        done
    fi
}

fix_jail_permissions() {
    local JAIL=$1
    find "$JAIL" \
        \( -type d -o -type f \) \
        -exec chmod u+w,g-w,o-w {} +
    find "$JAIL" \
        -type d \
        -exec chmod +rx {} +
}

tarup_package() {
    local \
        JAIL=$1 \
        OUTPUT=$2

    (
        cd "$JAIL"
        "$MAKEPKG" "${MAKEPKG_ARGS[@]}" "$OUTPUT"
    )
}

warn() {
    if [[ -t 1 ]]; then
        # Yellow
        printf '\033[1;33m'
    fi

    printf "$@" >&2

    if [[ -t 1 ]]; then
        # Normal
        printf '\033[0;39m'
    fi
}

main "$@"
