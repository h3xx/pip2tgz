#!/bin/bash
# vi: et sts=4 sw=4 ts=4

set -e

readonly VERSION=0.0.1
readonly PIP2TGZ=pip2tgz
readonly PIP2TGZ_AUTHOR='Dan Church <h3xx@gmx.com>'
readonly PIP_ARGS_GENERAL=(
    --no-input
    --disable-pip-version-check
)
readonly MAKEPKG=/sbin/makepkg
readonly MAKEPKG_ARGS=(
    --linkadd y
    --chown n
)

PIP=pip3
PYTHON=python3
BASE_REQUIRES=(python3)
PKG_OUTDIR=/tmp
PKG_PREFIX=python3-
BUILD_TAG=
BUILD_NUMBER=1
PKG_EXT=txz
ARCH=$(uname -m)
USE_MAKEPKG=1
FORCE=0

SLACK_DESC_BANNER0="Packaged by $PIP2TGZ"
SLACK_DESC_BANNER1="$PIP2TGZ by $PIP2TGZ_AUTHOR"
SLACK_DESC_BANNER2="https://github.com/h3xx/pip2tgz"

TEMPDIR=$(mktemp -d -t "${0##*/}.XXXXXX")
cleanup() {
    rm -rf -- "$TEMPDIR"
}
trap 'cleanup' EXIT

TEMP_PYTHONLIBDIR=$TEMPDIR/.pylib
export PYTHONPATH=${PYTHONPATH:+$PYTHONPATH:}$TEMP_PYTHONLIBDIR

HELP_MESSAGE() {
    cat <<EOF
Usage: $PIP2TGZ [OPTIONS] PACKAGE...
Make Slackware packages from PIP modules.
Options:
    --help                  Show this help message.
    --version               Show version info and exit.
    -2                      Build a Python 2 package.
    -3                      Build a Python 3 package (default).
    --arch ARCH             Specifies the package architecture.
    --build-tag TAG         Specifies the package build tag.
    --build-number NUM      Specifies the package build number.
    --pkgdir DIR            Output packages to DIR (default: /tmp).
    --no-banner              Leave out the $PIP2TGZ banner in the description
    --pip CMD               Use CMD as the PIP binary (default: pip3).
    --prefix PREFIX         Use "{PREFIX}-PACKAGE" as the generated package
                              prefix (default is python3-).
    --package-ext EXT       Specifies the package extension (default: txz).
                              Ignored if --dir is specified.
    --no-makepkg            Do not attempt to run makepkg to build a package.
                              Really only useful with --jail.
    --jail-only JAIL        Set the package jail location to JAIL and don't run
                              makepkg to build a package.
    --jail JAIL             Set the package jail location to JAIL. The script
                              will clear this directory before outputting its
                              files there. By default, it uses a temporary
                              directory as the build jail.

EOF
    COPYRIGHT_MESSAGE
}

VERSION_MESSAGE() {
    cat <<EOF
$PIP2TGZ $VERSION

EOF
    COPYRIGHT_MESSAGE
}

COPYRIGHT_MESSAGE() {
    cat <<EOF
Copyright (C) 2021 $PIP2TGZ_AUTHOR.
License GPLv3+: GNU GPL version 3 or later (http://gnu.org/licenses/gpl.html).
This is free software: you are free to change and redistribute it. There is NO
WARRANTY, to the extent permitted by law.
EOF
}

main() {
    local ARGS=("$@")
    local ARG_ERRORS=0
    local ai
    for (( ai = 0; ai < ${#ARGS[@]} ; ++ai )); do
        case "${ARGS[$ai]}" in
            --help)
                HELP_MESSAGE
                exit 0
                ;;
            --version)
                VERSION_MESSAGE
                exit 0
                ;;
            -2)
                PIP=pip2
                PYTHON=python2
                PKG_PREFIX=python2-
                BASE_REQUIRES=(python2)
                ;;
            -3)
                PIP=pip3
                PYTHON=python3
                PKG_PREFIX=python3-
                BASE_REQUIRES=(python3)
                ;;
            --arch)
                let ++ai
                ARCH=${ARGS[$ai]}
                ;;
            --build-number)
                let ++ai
                BUILD_NUMBER=${ARGS[$ai]}
                ;;
            --build-tag)
                let ++ai
                BUILD_TAG=${ARGS[$ai]}
                ;;
            --force)
                FORCE=1
                ;;
            --jail)
                let ++ai
                JAIL=${ARGS[$ai]}
                ;;
            --jail-only)
                let ++ai
                JAIL=${ARGS[$ai]}
                USE_MAKEPKG=0
                ;;
            --nobanner |\
            --no-banner)
                # Note: undocumented --nobanner to make this sorta-compatible
                # with cpan2tgz (DWIM!)
                SLACK_DESC_BANNER0=
                SLACK_DESC_BANNER1=
                ;;
            --no-makepkg)
                USE_MAKEPKG=0
                ;;
            --pip)
                let ++ai
                PIP=${ARGS[$ai]}
                ;;
            --pkgdir)
                let ++ai
                PKG_OUTDIR=${ARGS[$ai]}
                ;;
            --package-ext)
                let ++ai
                PKG_EXT=${ARGS[$ai]}
                ;;
            --|[^-]*)
                break
                ;;
            *)
                printf 'Unrecognized option: %s\n' "${ARGS[$ai]}" >&2
                ARG_ERRORS=1
                ;;
        esac
    done

    if [[ $ARG_ERRORS -ne 0 ]]; then
        echo "Try '$PIP2TGZ --help' for more information." >&2
        exit 2
    fi

    shift $ai

    if [[ $UID -ne 0 && $USE_MAKEPKG -ne 0 ]]; then
        if [[ $FORCE -eq 0 ]]; then
            printf '%s\n%s\n%s\n%s\n' \
                'Politely refusing to build packages without proper permissions. Either...' \
                '1. Re-run as root.' \
                '2. Re-run with --jail-only DIR to just create a package jail.' \
                '3. Re-run with --force to force building broken packages.' \
                >&2
            exit 1
        else
            warn 'Warning: Creating broken packages with files owned by %s:%s\nInstall them at your own risk!\n' \
                "$(id -un)" \
                "$(id -gn)" \
                >&2
        fi
    fi

    local \
        PKG \
        _JAIL \
        _OUTPUT \
        _REAL_PKG \
        _VER \
        _WHEEL_FILE

    for PKG; do
        _JAIL=$(realpath -- "${JAIL:-$(mktemp -d -p "$TEMPDIR" -t "jail.XXXXXX")}")
        _WHEEL_FILE=$(wheel_file "$PKG")
        _VER=$(wheel_version "$_WHEEL_FILE")

        # Correct package name as it exists in pip
        # e.g. Foo-Bar could be and probably is Foo_Bar
        _REAL_PKG=${_WHEEL_FILE##*/}
        _REAL_PKG=${_REAL_PKG:0:${#PKG}}
        if [[ $_REAL_PKG != $PKG ]]; then
            warn 'Warning: Real package name is %s\n' "$_REAL_PKG"
            PKG=$_REAL_PKG
        fi

        make_package_jail "$PKG" "$_JAIL" "$_VER"
        if [[ $USE_MAKEPKG -ne 0 ]]; then
            _OUTPUT=$(realpath -- "$PKG_OUTDIR")/$(pip_package_to_slackpack_name "$PKG")-$_VER-$ARCH-$BUILD_NUMBER$BUILD_TAG.$PKG_EXT
            echo "outputting to $_OUTPUT" >&2
            tarup_package "$_JAIL" "$_OUTPUT"
        fi
    done
}

make_package_jail() {
    local \
        PACKAGE_NAME=$1 \
        JAIL=$2 \
        VER=$3

    pip_install_into_jail "$JAIL" "$PACKAGE_NAME"
    install_slackware_metadata "$JAIL" "$PACKAGE_NAME"
    install_docdir "$JAIL" "$PACKAGE_NAME" "$VER"
    fix_jail_permissions "$JAIL"
}

pip_download() {
    local \
        PACKAGE_NAME=$1 \
        DEST_DIR=${2:-$TEMPDIR}
    "$PIP" download "$PACKAGE_NAME" \
        "${PIP_ARGS_GENERAL[@]}" \
        -d "$TEMPDIR" \
        --no-deps \
        --no-binary :all:-v
}

has_library() {
    local LIBRARY=$1
    "$PIP" show "$LIBRARY" >/dev/null
}

temp_install_library() {
    local LIBRARY
    for LIBRARY; do
        if ! has_library "$LIBRARY"; then
            # System library not found
            "$PIP" install \
                "${PIP_ARGS_GENERAL[@]}" \
                -t "$TEMP_PYTHONLIBDIR" \
                "$LIBRARY" \
                >/dev/null \
                || return
        fi
    done
}

wheel_file() {
    local PACKAGE_NAME=$1
    local WHEEL_BASENAME=$(
        pip_download "$PACKAGE_NAME" "$TEMPDIR" |
        grep -oP '[^\s]+\.whl\b' |
        head -1
    )
    if [[ -z $WHEEL_BASENAME ]]; then
        printf 'Failed to parse output from "%s download %s"\n' "$PIP" "$PACKAGE_NAME" >&2
        exit 2
    fi
    local WHEEL_FILE=$TEMPDIR/$WHEEL_BASENAME
    if [[ ! -f $WHEEL_FILE ]]; then
        printf 'Failed to download %s\n' "$WHEEL_FILE" >&2
        exit 2
    fi
    printf '%s\n' "$WHEEL_FILE"
}

wheel_version() {
    local WHEEL_FILE=$1
    # Ensure we can load pkginfo
    temp_install_library pkginfo
    "$PYTHON" -c '
from pkginfo import Wheel
from sys import argv
w = Wheel(argv[1])
print(w.version)
    ' "$WHEEL_FILE"
}

python_deps() {
    local PACKAGE_NAME=$1
    pip_download "$PACKAGE_NAME" 2>&1 |
        grep ^Collecting |
        sed -e '1d' |
        cut -d ' ' -f 2-
}

pip_install_into_jail() {
    local \
        JAIL=$1 \
        PACKAGE_NAME=$2
    "$PIP" install "$PACKAGE_NAME" \
        "${PIP_ARGS_GENERAL[@]}" \
        --ignore-installed \
        --no-deps \
        --root "$JAIL"
}

pip_package_to_slackpack_name() {
    local PACKAGE_NAME=$1
    printf '%s%s\n' "$PKG_PREFIX" "$PACKAGE_NAME" |
        tr A-Z a-z
}

install_slackware_metadata() {
    local \
        JAIL=$1 \
        PACKAGE_NAME=$2

    mkdir -p -- "$JAIL/install"

    # slack-desc
    local PKG_BASE=$(pip_package_to_slackpack_name "$PACKAGE_NAME")
    # How far to indent the handy ruler in the slack-desc
    local _INDENT=${PKG_BASE//?/ }
    cat <<EOF >"$JAIL/install/slack-desc"
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description.  Line
# up the first '|' above the ':' following the base package name, and the '|' on
# the right side marks the last column you can put a character in. You must make
# exactly 11 lines for the formatting to be correct.  It's also customary to
# leave one space after the ':'.

$_INDENT|-----handy-ruler------------------------------------------------------|
$PKG_BASE: ${PACKAGE_NAME} (Python library)
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:
$PKG_BASE:${SLACK_DESC_BANNER0:+ $SLACK_DESC_BANNER0}
$PKG_BASE:${SLACK_DESC_BANNER1:+ $SLACK_DESC_BANNER1}
$PKG_BASE:${SLACK_DESC_BANNER2:+ $SLACK_DESC_BANNER2}
$PKG_BASE:
EOF

    # slack-required
    (
        # Add deps in $BASE_REQUIRES
        for _SLACK_PKG in "${BASE_REQUIRES[@]}"; do
            printf '%s\n' "$_SLACK_PKG"
        done
        # Scan and add python library deps
        python_deps "$PACKAGE_NAME" |
        while read -r _LINE; do
            # TODO Some are formatted with a number, e.g. click>=7.1.2
            _PIP_BASE=${_LINE%%[<>=]*}
            _VER_REQ=${_LINE:${#_PIP_BASE}}
            _SLK_BASE=$(pip_package_to_slackpack_name "$_PIP_BASE")
            printf '%s%s\n' "$_SLK_BASE" "$_VER_REQ"
        done
    ) |
    sort -u > "$JAIL/install/slack-required"
}

install_docdir() {
    local \
        JAIL=$1 \
        PACKAGE_NAME=$2 \
        VER=$3

    local PKG_BASE=$(pip_package_to_slackpack_name "$PACKAGE_NAME")

    local DOCDIR=$JAIL/usr/doc/$PKG_BASE-$VER
    mkdir -p -- "$DOCDIR"

    local DINFO_DIR=$(find "$JAIL/" -type d -name "*.dist-info" | head -1)
    if [[ -d $DINFO_DIR ]]; then
        for fn in "$DINFO_DIR"/*; do
            case "${fn##*/}" in
                INSTALLER | \
                METADATA | \
                RECORD | \
                REQUESTED | \
                top_level.txt | \
                WHEEL)
                    # Skip
                    ;;
                *)
                    ln -sfv -- \
                        "$(realpath --relative-to="$DOCDIR" -- "$fn")" \
                        "$DOCDIR/"
                    ;;
            esac
        done
    fi
    # else - just skip making doc links
}

fix_jail_permissions() {
    local JAIL=$1
    find "$JAIL" \
        \( -type d -o -type f \) \
        -exec chmod u+w,g-w,o-w {} +
    find "$JAIL" \
        -type d \
        -exec chmod +rx {} +
}

tarup_package() {
    local \
        JAIL=$1 \
        OUTPUT=$2

    (
        cd "$JAIL"
        "$MAKEPKG" "${MAKEPKG_ARGS[@]}" "$OUTPUT"
    )
}

warn() {
    if [[ -t 1 ]]; then
        # Yellow
        printf '\033[1;33m'
    fi

    printf "$@"

    if [[ -t 1 ]]; then
        # Normal
        printf '\033[0;39m'
    fi
}

main "$@"
